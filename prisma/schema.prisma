// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String             @id @default(cuid())
    clerkUserId          String
    firstname            String
    lastname             String
    email                String             @unique
    contactNumber        String?
    address              String?
    profileImage         String?
    userType             String?      @default("CUSTOMER")
    
    orders               Order[]
    checkout             Checkout[]
    design             Design[]
    messagesSent     Message[] @relation("Sender")
    messagesReceived Message[] @relation("Recipient")


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
}

model Product {
    id          Int             @id @default(autoincrement())
    name        String
    image       String?
    brand       String?
    size        Size
    color       String?
    stocks      String
    price       Float
    categoryId  Int

    category    ProductCategory @relation(fields: [categoryId], references: [id])
    orders      Order[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([name])
}

model ProductCategory {
    id          Int         @id @default(autoincrement())
    key         String
    name        String

    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    products    Product[]  
}


// this is for adding in cart
model Order {
    id         Int       @id @default(autoincrement())
    quantity   Int
    status     CartStatus   @default(CARTED)
    totalPrice Float
    productId  Int
    userId     String
    checkoutId Int?

    product    Product   @relation(fields: [productId], references: [id])
    user       User      @relation(fields: [userId], references: [id])
    checkout   Checkout?  @relation(fields: [checkoutId], references: [id])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    @@index([userId,productId,id])
}

// this is for ordered products
model Checkout {
    id              Int         @id @default(autoincrement())
    userId          String
    proofOfPayment  String?
    deliveryDate    DateTime    @default(now())
    totalPrice      Float
    status  CheckoutStaus       @default(PENDING)

    order   Order[]
    user    User    @relation(fields: [userId], references: [id])
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@index([userId,id])
}



model Offers {
    id        Int      @id @default(autoincrement())
    name      String
    price     Float
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])

}

model WalkIn {
    id          Int      @id @default(autoincrement())
    quantity    Int
    image       String?
    description String
    customer    String
    price       Float
}


model Design {

    id          Int      @id @default(autoincrement())
    description String?
    image      String
    userId     String
    user       User      @relation(fields: [userId], references: [id])


}

enum CartStatus {
    CARTED
    CANCELED
    ORDERED
}

enum CheckoutStaus {
    PENDING
    PROCESS
    PICKUP
    CANCELED
    APPROVED
    DELIVERY
    DONE
}


enum Size {
    DOUBLE_EXTRA_SMALL
    EXTRA_SMALL
    SMALL
    MEDIUM
    LARGE
    EXTRALARGE
    DOUBLELARGE
    TRIPELARGE
}
model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  senderId    String?
  recipientId String?

  sender      User? @relation("Sender", fields: [senderId], references: [id])
  recipient   User? @relation("Recipient", fields: [recipientId], references: [id])
}
